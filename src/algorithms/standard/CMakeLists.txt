target_sources(essentia
  PRIVATE
    autocorrelation.cpp
    binaryoperator.cpp
    binaryoperatorstream.cpp
    bpf.cpp
    chromagram.cpp
    clipper.cpp
    constantq.cpp
    crosscorrelation.cpp
    cubicspline.cpp
    dct.cpp
    derivative.cpp
    envelope.cpp
    framebuffer.cpp
    framecutter.cpp
    frametoreal.cpp
    idct.cpp
    maxfilter.cpp
    minmax.cpp
    monomixer.cpp
    multiplexer.cpp
    noiseadder.cpp
    nsgconstantq.cpp
    nsgconstantqstreaming.cpp
    nsgiconstantq.cpp
    overlapadd.cpp
    peakdetection.cpp
    pooltotensor.cpp
    powerspectrum.cpp
    realaccumulator.cpp
    replaygain.cpp
    resample.cpp
    scale.cpp
    silencerate.cpp
    slicer.cpp
    spectrum.cpp
    spectrumCQ.cpp
    spline.cpp
    startstopsilence.cpp
    stereodemuxer.cpp
    stereomuxer.cpp
    stereotrimmer.cpp
    tensornormalize.cpp
    tensortopool.cpp
    tensortovectorreal.cpp
    tensortranspose.cpp
    trimmer.cpp
    unaryoperator.cpp
    unaryoperatorstream.cpp
    vectorrealaccumulator.cpp
    vectorrealtotensor.cpp
    viterbi.cpp
    warpedautocorrelation.cpp
    welch.cpp
    windowing.cpp
    autocorrelation.h
    binaryoperator.h
    binaryoperatorstream.h
    bpf.h
    chromagram.h
    clipper.h
    constantq.h
    crosscorrelation.h
    cubicspline.h
    dct.h
    derivative.h
    envelope.h
    framebuffer.h
    framecutter.h
    frametoreal.h
    idct.h
    maxfilter.h
    minmax.h
    monomixer.h
    multiplexer.h
    noiseadder.h
    nsgconstantq.h
    nsgconstantqstreaming.h
    nsgiconstantq.h
    overlapadd.h
    peakdetection.h
    pooltotensor.h
    powerspectrum.h
    realaccumulator.h
    replaygain.h
    resample.h
    scale.h
    silencerate.h
    slicer.h
    spectrum.h
    spectrumCQ.h
    spline.h
    startstopsilence.h
    stereodemuxer.h
    stereomuxer.h
    stereotrimmer.h
    tensornormalize.h
    tensortopool.h
    tensortovectorreal.h
    tensortranspose.h
    trimmer.h
    unaryoperator.h
    unaryoperatorstream.h
    vectorrealaccumulator.h
    vectorrealtotensor.h
    viterbi.h
    warpedautocorrelation.h
    welch.h
    windowing.h)

if(ESSENTIA_USE_ACCEL)
  target_sources(essentia
    PRIVATE
      ffta.cpp
      fftacomplex.cpp
      iffta.cpp
      ifftacomplex.cpp
      ffta.h
      fftacomplex.h
      iffta.h
      ifftacomplex.h)
endif()

if(ESSENTIA_USE_KISSFFT)
  target_sources(essentia
    PRIVATE
      fftk.cpp
      fftkcomplex.cpp
      ifftk.cpp
      ifftkcomplex.cpp
      fftk.h
      fftkcomplex.h
      ifftk.h
      ifftkcomplex.h)
endif()


if(ESSENTIA_USE_FFTW)
  target_sources(essentia
    PRIVATE
      fftw.cpp
      fftwcomplex.cpp
      ifftw.cpp
      ifftwcomplex.cpp
      fftw.h
      fftwcomplex.h
      ifftw.h
      ifftwcomplex.h)
endif()

